#conf_molikuners-MacBook-Pro # Work

export N_PREFIX="$HOME/n"; [[ :$PATH: == *":$N_PREFIX/bin:"* ]] || PATH+=":$N_PREFIX/bin"  # for n (see http://git.io/n-install-repo).

export PATH="$HOME/.jenv/bin:$PATH"
eval "$(jenv init -)"

export AWS_SHARED_CREDENTIALS_FILE=$HOME/.aws/credentials
export AWS_DEFAULT_PROFILE=default
export AWS_DEFAULT_REGION=eu-west-1

export GPG_TTY=$(tty)

inDir() {
  local pwdPath
  pwdPath=$(pwd)
  [ "${pwdPath:0:${#1}}" = $1 ]
}

dockerExsists() {
  [ "docker ps -aq -f name=$1" ]
}

dockerCreateBuildServer() {
  if dockerExsists build-server; then
    echo "Can't create an exsisting server again!" >&2
    return 1
  fi
  docker create -it --name build-server --hostname build-server -v ~/.gradle/caches:/root/.gradle/caches -v ~/IdeaProjects:/root/IdeaProjects -v ~/workspace:/root/workspace --entrypoint 'echo "Please detatch and exec your stuff" && while true; do sleep 9999999; done' javiersantos/android-ci
}

dockerRunning() {
  eval "$(docker inspect -f '{{.State.Running}}' $1 2>/dev/null || echo 'false')"
}

buildServer() {
  if ! inDir ~/workspace && ! inDir ~/IdeaProjects; then
    echo "You need to be in one of the mounted dirs to be able to build" >&2
    return 1
  fi
  local pathPart
  pathPart="$(pwd | cut -d '/' -f '4-')"
  if dockerRunning build-server; then
    if ! [ ! "$*" ]; then
      docker exec -it -w /root/$pathPart build-server "$@"
    else
      docker exec -it -w /root/$pathPart build-server bash
    fi
  elif dockerExsists build-server; then
    docker start build-server
    buildServer $@ # execute itself and start bash session
  else
    dockerCreateBuildServer
    buildServer $@
  fi
}

gitMolikuner() {
  if ! git status &>/dev/null; then
    echo "You need to have an exsisting git repo" >&2
    return 1
  fi
  git config user.name molikuner
  git config user.email molikuner@gmail.com
}

gitWork() {
  if ! git status &>/dev/null; then
    echo "You need to have an exsisting git repo" >&2
    return 1
  fi
  git config --unset user.name
  git config --unset user.email
}

gitProfile() {
  if ! git status &>/dev/null; then
    echo "You need to have an exsisting git repo" >&2
    return 1
  fi
  local name
  name=$(git config user.name)
  if [ "$name" = "molikuner" ]; then
    echo "Profile: molikuner"
  elif [ "$name" = "$NAME" ]; then # $NAME is from .credentials
    echo "Profile: Work"
  else
    echo "Unknown profile" >&2
    return 1
  fi
}

tdev() {
  tmx "dev" $@
}

if ! _has_session main ; then
  _create_session main
fi
