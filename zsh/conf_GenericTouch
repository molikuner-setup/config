#conf_Generic

export GPG_TTY=$(tty)

tadb() {
  tmx "adb" $@
}

tdev() {
  tmx "dev" $@
}

typeOnDevice() {
  echo "$@" | adb shell xargs -0 input text
}

isAppInstalled() {
  if _argsContaining "-h" $@ || _argsContaining "--help" $@ || \
    [ ! "$1" ]; then
    echo -e "USAGE: isAppInstalled app\n\tapp:\tapp is a complete app name (e.g. com.moliuner.nigb)"
    return 1
  fi
  adb shell "pm list packages -f" | grep -Eo "=[^\/=]+" | grep -Eo "[^=]+" | grep "${1}" >/dev/null
}

_execConfig() {
  if [ -f "$2" ]; then
    for (( c=1; c<=$(wc -l < $2); c++ )) ; do
      local pkg=$(sed "${c}q;d" $2)
      if [ "$pkg" ]; then
        if [ -z "${pkg##* apkOnly}" ]; then
          $1 "${pkg:0:${#pkg}-8}" "apkOnly"
        else
          $1 "$pkg"
        fi
      fi
    done
  else
    _error "Config file not found!"
  fi
}

backupApp() {
  if _argsContaining "-h" $@ || _argsContaining "--help" $@ || \
    [ ! "$1" ] || ([ "$2" ] && [ "$2" != "apkOnly" ] && [ "$1" != "-c" ]); then
    echo -e "USAGE: backupApp (<app> [apkOnly])|(-c [configFile])\n\tapp:\tapp is a complete app name (e.g. com.molikuner.nigb)\n\tconfigFile\targuments in seperated lines"
    return 1
  elif [ "$1" = "-c" ]; then
    [ "$2" ] || 2="./.backup.conf"
    _execConfig "$0" "$2"
  else
    local pkg=$(adb shell pm path "$1" | cut -d : -f 2 | sed s/\\r//g | head -1)
    if ! [ "$pkg" ]; then echo "Package '$1' not found!\n"; return 1; fi
    if [ "$2" ]; then
      _progessInfo "  BACKUPING: APK"
      mkdir -p "./${1}/${1}_apk" || _error "could not create directory $1" "./${1}" || return 1
      adb pull "$pkg" "./${1}/${1}_apk/base.apk" > /dev/null || _error "could not get apk for $1" "./${1}" || return 1
      echo "apkOnly" > ./${1}/.restore.conf || _error "could not create .restore.conf $1" ./${1} || return 1
    else
      _progessInfo "  BACKUPING"
      adb pull -a "/data/data/$1" > /dev/null || _error "could not get data for $1" ./${1} || return 1
      adb pull "${pkg:0:${#pkg}-9}" "./$1/" > /dev/null || _error "could not get app for $1" ./${1} || return 1
      echo "$pkg" > ./${1}/.restore.conf || _error "could not create .restore.conf $1" ./${1} || return 1
    fi
    echo -e "$1\n"
  fi
}

restoreApp() {
  if _argsContaining "-h" $@ || _argsContaining "--help" $@ || \
    [ ! "$1" ] || ([ "$2" ] && [ "$2" != "apkOnly" ] && [ "$1" != "-c" ]); then
    echo -e "USAGE: restoreApp (<app>)|(-c [configFile])\n\tapp:\tapp is a complete app name (e.g. com.molikuner.nigb)\n\tconfigFile\targuments in seperated lines"
    return 1
  elif [ "$1" = "-c" ]; then
    [ "$2" ] || 2="./.backup.conf"
    _execConfig "$0" "$2"
  elif [ -d "./$1" ]; then
    #is my custom backup
    if [ -f "./$1/.restore.conf" ]; then
      #is new version
      local bPKG=$(cat ./$1/.restore.conf)
      if [ "$bPKG" = "apkOnly" ]; then
        _progessInfo "  INSTALLING: $1"
        adb install ./${1}/${1}_apk/base.apk || return 1
      else
        bPKG=${bPKG:10:${#bPKG}-19}
        if [ "$2" = "apkOnly" ]; then
          _progessInfo "  INSTALLING: $1"
          adb install ./${1}/${bPKG}/base.apk || return 1
        else
          _progessInfo "  INSTALLING"
          adb install ./${1}/${bPKG}/base.apk || return 1
          _progessInfo "  RESTORING"
          adb push "./$1" /data/data/ >/dev/null || _error "could not push data for $1" || return 1
          local pkg=$(adb shell pm path "$1" | cut -d : -f 2 | sed s/\\r//g | head -1)
          pkg=${pkg:0:${#pkg}-8}
          adb shell "mv -f /data/data/$1/$bPKG $pkg" || _error "could not move backup data to new installation for $1" || return 1
          adb shell "rm /data/data/$1/.restore.conf" || _error "could not delete .restore.conf on remote for $1" || return 1
          echo -e "$1\n"
        fi
      fi
    else
      #is old version
      adb install "$(ls -R ./$1/$1* | head -n 1 | cut -d ':' -f 1)/base.apk"
      adb push "./$1" /data/data/
      adb shell "rm -r $(adb shell "ls -R /data/data/$1/$1* | head -n 1 | cut -d ':' -f 1")"
    fi
  elif [ -f "./$1.ab" ]; then
    #is adb backup
    adb restore "./$1.ab"
  else
    echo "$1: no backup found"
  fi
}

installNStart() {
  _argsContaining "-h" $@ || _argsContaining "--help" $@ || [ ! "$1" ] || [ ! "$2" ] \
    && echo -e "INTERNAL ERROR!: wrong params $0\nUSAGE: <file> <app> [ -f ] [ -n ]" && return 1
  if [ "$(pwd)/" != "$(basedir $1)" ]; then # TODO change to "not changing dir"
    local dir="$(basedir $1)"
    echo "changing direcory to $dir"
    cd "$dir" || _error "could not cd into $dir" || return 1
    split
  fi
  echo -n "- waiting for device -"
  adb wait-for-device && echo -n "${LINE_CLEAR}"
  if ! isAppInstalled "$2"; then
    _progessInfo "INSTALLING" && adb install "$1" || return 1
  elif _argsContaining "-f" $@; then
    _progessInfo "UNINSTALLING" && adb uninstall "$2" || return 1
    _progessInfo "INSTALLING" && adb install "$1" || return 1
  else
    _progessInfo "REINSTALLING" && adb install -r "$1" || return 1
  fi
  if ! _argsContaining "-n" $@; then
    split
    startApp "$2"
  fi
}

startApp() {
  if _argsContaining "-h" $@ || _argsContaining "--help" $@ || [ ! "$1" ]; then
    echo "You need to specyify an app (example: com.molikuner.nigb)"
    return 1
  fi
  _progessInfo "STARTING"
  adb shell monkey -p $1 1 >/dev/null 2>&1 \
    && echo "${COLOR_GREEN}OKAY${COLOR_RESET}" \
    || _error "${COLOR_RED}FAILED${COLOR_RESET} ($1)" || return 1
  _progessInfo "FIXING ANDROID"
  adb shell content insert --uri content://settings/system --bind name:s:accelerometer_rotation --bind value:i:0 \
    && echo "${COLOR_GREEN}OKAY${COLOR_RESET}" \
    || _error "${COLOR_RED}FAILED${COLOR_RESET}" || return 1
}

if ! _has_session main ; then
  _create_session main
fi
